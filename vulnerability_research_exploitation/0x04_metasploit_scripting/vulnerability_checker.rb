#!/usr/bin/env ruby
# vulnerability_checker.rb
# A Metasploit auxiliary module to check MS17-010 (EternalBlue) vulnerability.
# Place this file in: modules/auxiliary/scanner/ms17_010_checker.rb

require 'msf/core'
require 'msf/core/exploit/smb'

class MetasploitModule < Msf::Auxiliary
  include Msf::Auxiliary::Scanner
  include Msf::Exploit::Remote::SMB::Client

  def initialize(info = {})
    super(update_info(info,
      'Name'           => 'MS17-010 Vulnerability Checker',
      'Description'    => %q{
        This module checks if a target SMB server is vulnerable to MS17-010 (EternalBlue).
      },
      'Author'         => ['Ahmed Belhaj', 'Xavier'],
      'License'        => MSF_LICENSE
    ))

    register_options(
      [
        Opt::RHOST(),
        OptInt.new('SMBPORT', [true, 'The SMB port to use', 445]),
      ]
    )
  end

  def run_host(ip)
    smb_port = datastore['SMBPORT']
    print_status("[*] Checking #{ip}:#{smb_port} for MS17-010 vulnerability")

    begin
      smb_login(ip, smb_port)
      # Send the trans2 query to check vulnerability
      exploit = framework.modules.create('auxiliary/scanner/smb/smb_ms17_010')
      exploit.datastore['RHOSTS'] = ip
      exploit.datastore['RPORT']  = smb_port
      result = exploit.run_single

      if result && result[:vulnerable]
        print_good("[+] #{ip} is vulnerable to MS17-010.")
      else
        print_status("[-] #{ip} does not appear vulnerable to MS17-010.")
      end

    rescue ::Rex::ConnectionError
      print_error("[-] Unable to connect to #{ip}:#{smb_port}")
    rescue => e
      print_error("[-] Error checking vulnerability on #{ip}: #{e.message}")
    end

    print_status("[*] Auxiliary module execution completed")
  end
end
